{
  "tools": [
    {
      "description": "Add a comment to an existing issue",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "description": "Comment content",
            "type": "string"
          },
          "issue_number": {
            "description": "Issue number to comment on",
            "type": "number"
          },
          "owner": {
            "description": "Repository owner",
            "type": "string"
          },
          "repo": {
            "description": "Repository name",
            "type": "string"
          }
        },
        "required": ["owner", "repo", "issue_number", "body"]
      },
      "name": "add_issue_comment"
    },
    {
      "description": "Add a review comment to a pull request",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "description": "The text of the review comment",
            "type": "string"
          },
          "commit_id": {
            "description": "The SHA of the commit to comment on. Required unless in_reply_to is specified.",
            "type": "string"
          },
          "in_reply_to": {
            "description": "The ID of the review comment to reply to. When specified, only body is required and all other parameters are ignored",
            "type": "number"
          },
          "line": {
            "description": "The line of the blob in the pull request diff that the comment applies to. For multi-line comments, the last line of the range",
            "type": "number"
          },
          "owner": {
            "description": "Repository owner",
            "type": "string"
          },
          "path": {
            "description": "The relative path to the file that necessitates a comment. Required unless in_reply_to is specified.",
            "type": "string"
          },
          "pull_number": {
            "description": "Pull request number",
            "type": "number"
          },
          "repo": {
            "description": "Repository name",
            "type": "string"
          },
          "side": {
            "description": "The side of the diff to comment on",
            "enum": ["LEFT", "RIGHT"],
            "type": "string"
          },
          "start_line": {
            "description": "For multi-line comments, the first line of the range that the comment applies to",
            "type": "number"
          },
          "start_side": {
            "description": "For multi-line comments, the starting side of the diff that the comment applies to",
            "enum": ["LEFT", "RIGHT"],
            "type": "string"
          },
          "subject_type": {
            "description": "The level at which the comment is targeted",
            "enum": ["line", "file"],
            "type": "string"
          }
        },
        "required": ["owner", "repo", "pull_number", "body"]
      },
      "name": "add_pull_request_review_comment"
    },
    {
      "description": "Create a new branch in a GitHub repository",
      "inputSchema": {
        "type": "object",
        "properties": {
          "branch": {
            "description": "Name for new branch",
            "type": "string"
          },
          "from_branch": {
            "description": "Source branch (defaults to repo default)",
            "type": "string"
          },
          "owner": {
            "description": "Repository owner",
            "type": "string"
          },
          "repo": {
            "description": "Repository name",
            "type": "string"
          }
        },
        "required": ["owner", "repo", "branch"]
      },
      "name": "create_branch"
    },
    {
      "description": "Create a new issue in a GitHub repository",
      "inputSchema": {
        "type": "object",
        "properties": {
          "assignees": {
            "description": "Usernames to assign to this issue",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "body": {
            "description": "Issue body content",
            "type": "string"
          },
          "labels": {
            "description": "Labels to apply to this issue",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "milestone": {
            "description": "Milestone number",
            "type": "number"
          },
          "owner": {
            "description": "Repository owner",
            "type": "string"
          },
          "repo": {
            "description": "Repository name",
            "type": "string"
          },
          "title": {
            "description": "Issue title",
            "type": "string"
          }
        },
        "required": ["owner", "repo", "title"]
      },
      "name": "create_issue"
    },
    {
      "description": "Create or update a single file in a GitHub repository",
      "inputSchema": {
        "type": "object",
        "properties": {
          "branch": {
            "description": "Branch to create/update the file in",
            "type": "string"
          },
          "content": {
            "description": "Content of the file",
            "type": "string"
          },
          "message": {
            "description": "Commit message",
            "type": "string"
          },
          "owner": {
            "description": "Repository owner (username or organization)",
            "type": "string"
          },
          "path": {
            "description": "Path where to create/update the file",
            "type": "string"
          },
          "repo": {
            "description": "Repository name",
            "type": "string"
          },
          "sha": {
            "description": "SHA of file being replaced (for updates)",
            "type": "string"
          }
        },
        "required": ["owner", "repo", "path", "content", "message", "branch"]
      },
      "name": "create_or_update_file"
    },
    {
      "description": "Create a new pull request in a GitHub repository",
      "inputSchema": {
        "type": "object",
        "properties": {
          "base": {
            "description": "Branch to merge into",
            "type": "string"
          },
          "body": {
            "description": "PR description",
            "type": "string"
          },
          "draft": {
            "description": "Create as draft PR",
            "type": "boolean"
          },
          "head": {
            "description": "Branch containing changes",
            "type": "string"
          },
          "maintainer_can_modify": {
            "description": "Allow maintainer edits",
            "type": "boolean"
          },
          "owner": {
            "description": "Repository owner",
            "type": "string"
          },
          "repo": {
            "description": "Repository name",
            "type": "string"
          },
          "title": {
            "description": "PR title",
            "type": "string"
          }
        },
        "required": ["owner", "repo", "title", "head", "base"]
      },
      "name": "create_pull_request"
    },
    {
      "description": "Create a review on a pull request",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "description": "Review comment text",
            "type": "string"
          },
          "comments": {
            "description": "Line-specific comments array of objects to place comments on pull request changes. Requires path and body. For line comments use line or position. For multi-line comments use start_line and line with optional side parameters.",
            "items": {
              "additionalProperties": false,
              "properties": {
                "body": {
                  "description": "comment body",
                  "type": "string"
                },
                "line": {
                  "anyOf": [
                    {
                      "type": "number"
                    },
                    {
                      "type": "null"
                    }
                  ],
                  "description": "line number in the file to comment on. For multi-line comments, the end of the line range"
                },
                "path": {
                  "description": "path to the file",
                  "type": "string"
                },
                "position": {
                  "anyOf": [
                    {
                      "type": "number"
                    },
                    {
                      "type": "null"
                    }
                  ],
                  "description": "position of the comment in the diff"
                },
                "side": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "null"
                    }
                  ],
                  "description": "The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range. (LEFT or RIGHT)"
                },
                "start_line": {
                  "anyOf": [
                    {
                      "type": "number"
                    },
                    {
                      "type": "null"
                    }
                  ],
                  "description": "The first line of the range to which the comment refers. Required for multi-line comments."
                },
                "start_side": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "null"
                    }
                  ],
                  "description": "The side of the diff on which the start line resides for multi-line comments. (LEFT or RIGHT)"
                }
              },
              "required": [
                "path",
                "body",
                "position",
                "line",
                "side",
                "start_line",
                "start_side"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "commitId": {
            "description": "SHA of commit to review",
            "type": "string"
          },
          "event": {
            "description": "Review action to perform",
            "enum": ["APPROVE", "REQUEST_CHANGES", "COMMENT"],
            "type": "string"
          },
          "owner": {
            "description": "Repository owner",
            "type": "string"
          },
          "pullNumber": {
            "description": "Pull request number",
            "type": "number"
          },
          "repo": {
            "description": "Repository name",
            "type": "string"
          }
        },
        "required": ["owner", "repo", "pullNumber", "event"]
      },
      "name": "create_pull_request_review"
    },
    {
      "description": "Create a new GitHub repository in your account",
      "inputSchema": {
        "type": "object",
        "properties": {
          "autoInit": {
            "description": "Initialize with README",
            "type": "boolean"
          },
          "description": {
            "description": "Repository description",
            "type": "string"
          },
          "name": {
            "description": "Repository name",
            "type": "string"
          },
          "private": {
            "description": "Whether repo should be private",
            "type": "boolean"
          }
        },
        "required": ["name"]
      },
      "name": "create_repository"
    },
    {
      "description": "Fork a GitHub repository to your account or specified organization",
      "inputSchema": {
        "type": "object",
        "properties": {
          "organization": {
            "description": "Organization to fork to",
            "type": "string"
          },
          "owner": {
            "description": "Repository owner",
            "type": "string"
          },
          "repo": {
            "description": "Repository name",
            "type": "string"
          }
        },
        "required": ["owner", "repo"]
      },
      "name": "fork_repository"
    },
    {
      "description": "Get details of a specific code scanning alert in a GitHub repository.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "alertNumber": {
            "description": "The number of the alert.",
            "type": "number"
          },
          "owner": {
            "description": "The owner of the repository.",
            "type": "string"
          },
          "repo": {
            "description": "The name of the repository.",
            "type": "string"
          }
        },
        "required": ["owner", "repo", "alertNumber"]
      },
      "name": "get_code_scanning_alert"
    },
    {
      "description": "Get details for a commit from a GitHub repository",
      "inputSchema": {
        "type": "object",
        "properties": {
          "owner": {
            "description": "Repository owner",
            "type": "string"
          },
          "page": {
            "description": "Page number for pagination (min 1)",
            "minimum": 1,
            "type": "number"
          },
          "perPage": {
            "description": "Results per page for pagination (min 1, max 100)",
            "maximum": 100,
            "minimum": 1,
            "type": "number"
          },
          "repo": {
            "description": "Repository name",
            "type": "string"
          },
          "sha": {
            "description": "Commit SHA, branch name, or tag name",
            "type": "string"
          }
        },
        "required": ["owner", "repo", "sha"]
      },
      "name": "get_commit"
    },
    {
      "description": "Get the contents of a file or directory from a GitHub repository",
      "inputSchema": {
        "type": "object",
        "properties": {
          "branch": {
            "description": "Branch to get contents from",
            "type": "string"
          },
          "owner": {
            "description": "Repository owner (username or organization)",
            "type": "string"
          },
          "path": {
            "description": "Path to file/directory",
            "type": "string"
          },
          "repo": {
            "description": "Repository name",
            "type": "string"
          }
        },
        "required": ["owner", "repo", "path"]
      },
      "name": "get_file_contents"
    },
    {
      "description": "Get details of a specific issue in a GitHub repository",
      "inputSchema": {
        "type": "object",
        "properties": {
          "issue_number": {
            "description": "The number of the issue",
            "type": "number"
          },
          "owner": {
            "description": "The owner of the repository",
            "type": "string"
          },
          "repo": {
            "description": "The name of the repository",
            "type": "string"
          }
        },
        "required": ["owner", "repo", "issue_number"]
      },
      "name": "get_issue"
    },
    {
      "description": "Get comments for a GitHub issue",
      "inputSchema": {
        "type": "object",
        "properties": {
          "issue_number": {
            "description": "Issue number",
            "type": "number"
          },
          "owner": {
            "description": "Repository owner",
            "type": "string"
          },
          "page": {
            "description": "Page number",
            "type": "number"
          },
          "per_page": {
            "description": "Number of records per page",
            "type": "number"
          },
          "repo": {
            "description": "Repository name",
            "type": "string"
          }
        },
        "required": ["owner", "repo", "issue_number"]
      },
      "name": "get_issue_comments"
    },
    {
      "description": "Get details of the authenticated GitHub user. Use this when a request include \"me\", \"my\"...",
      "inputSchema": {
        "type": "object",
        "properties": {
          "reason": {
            "description": "Optional: reason the session was created",
            "type": "string"
          }
        }
      },
      "name": "get_me"
    },
    {
      "description": "Get details of a specific pull request",
      "inputSchema": {
        "type": "object",
        "properties": {
          "owner": {
            "description": "Repository owner",
            "type": "string"
          },
          "pullNumber": {
            "description": "Pull request number",
            "type": "number"
          },
          "repo": {
            "description": "Repository name",
            "type": "string"
          }
        },
        "required": ["owner", "repo", "pullNumber"]
      },
      "name": "get_pull_request"
    },
    {
      "description": "Get the review comments on a pull request",
      "inputSchema": {
        "type": "object",
        "properties": {
          "owner": {
            "description": "Repository owner",
            "type": "string"
          },
          "pullNumber": {
            "description": "Pull request number",
            "type": "number"
          },
          "repo": {
            "description": "Repository name",
            "type": "string"
          }
        },
        "required": ["owner", "repo", "pullNumber"]
      },
      "name": "get_pull_request_comments"
    },
    {
      "description": "Get the list of files changed in a pull request",
      "inputSchema": {
        "type": "object",
        "properties": {
          "owner": {
            "description": "Repository owner",
            "type": "string"
          },
          "pullNumber": {
            "description": "Pull request number",
            "type": "number"
          },
          "repo": {
            "description": "Repository name",
            "type": "string"
          }
        },
        "required": ["owner", "repo", "pullNumber"]
      },
      "name": "get_pull_request_files"
    },
    {
      "description": "Get the reviews on a pull request",
      "inputSchema": {
        "type": "object",
        "properties": {
          "owner": {
            "description": "Repository owner",
            "type": "string"
          },
          "pullNumber": {
            "description": "Pull request number",
            "type": "number"
          },
          "repo": {
            "description": "Repository name",
            "type": "string"
          }
        },
        "required": ["owner", "repo", "pullNumber"]
      },
      "name": "get_pull_request_reviews"
    },
    {
      "description": "Get the combined status of all status checks for a pull request",
      "inputSchema": {
        "type": "object",
        "properties": {
          "owner": {
            "description": "Repository owner",
            "type": "string"
          },
          "pullNumber": {
            "description": "Pull request number",
            "type": "number"
          },
          "repo": {
            "description": "Repository name",
            "type": "string"
          }
        },
        "required": ["owner", "repo", "pullNumber"]
      },
      "name": "get_pull_request_status"
    },
    {
      "description": "Get details of a specific secret scanning alert in a GitHub repository.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "alertNumber": {
            "description": "The number of the alert.",
            "type": "number"
          },
          "owner": {
            "description": "The owner of the repository.",
            "type": "string"
          },
          "repo": {
            "description": "The name of the repository.",
            "type": "string"
          }
        },
        "required": ["owner", "repo", "alertNumber"]
      },
      "name": "get_secret_scanning_alert"
    },
    {
      "description": "List branches in a GitHub repository",
      "inputSchema": {
        "type": "object",
        "properties": {
          "owner": {
            "description": "Repository owner",
            "type": "string"
          },
          "page": {
            "description": "Page number for pagination (min 1)",
            "minimum": 1,
            "type": "number"
          },
          "perPage": {
            "description": "Results per page for pagination (min 1, max 100)",
            "maximum": 100,
            "minimum": 1,
            "type": "number"
          },
          "repo": {
            "description": "Repository name",
            "type": "string"
          }
        },
        "required": ["owner", "repo"]
      },
      "name": "list_branches"
    },
    {
      "description": "List code scanning alerts in a GitHub repository.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "owner": {
            "description": "The owner of the repository.",
            "type": "string"
          },
          "ref": {
            "description": "The Git reference for the results you want to list.",
            "type": "string"
          },
          "repo": {
            "description": "The name of the repository.",
            "type": "string"
          },
          "severity": {
            "description": "Filter code scanning alerts by severity",
            "enum": [
              "critical",
              "high",
              "medium",
              "low",
              "warning",
              "note",
              "error"
            ],
            "type": "string"
          },
          "state": {
            "default": "open",
            "description": "Filter code scanning alerts by state. Defaults to open",
            "enum": ["open", "closed", "dismissed", "fixed"],
            "type": "string"
          },
          "tool_name": {
            "description": "The name of the tool used for code scanning.",
            "type": "string"
          }
        },
        "required": ["owner", "repo"]
      },
      "name": "list_code_scanning_alerts"
    },
    {
      "description": "Get list of commits of a branch in a GitHub repository",
      "inputSchema": {
        "type": "object",
        "properties": {
          "owner": {
            "description": "Repository owner",
            "type": "string"
          },
          "page": {
            "description": "Page number for pagination (min 1)",
            "minimum": 1,
            "type": "number"
          },
          "perPage": {
            "description": "Results per page for pagination (min 1, max 100)",
            "maximum": 100,
            "minimum": 1,
            "type": "number"
          },
          "repo": {
            "description": "Repository name",
            "type": "string"
          },
          "sha": {
            "description": "SHA or Branch name",
            "type": "string"
          }
        },
        "required": ["owner", "repo"]
      },
      "name": "list_commits"
    },
    {
      "description": "List issues in a GitHub repository with filtering options",
      "inputSchema": {
        "type": "object",
        "properties": {
          "direction": {
            "description": "Sort direction",
            "enum": ["asc", "desc"],
            "type": "string"
          },
          "labels": {
            "description": "Filter by labels",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "owner": {
            "description": "Repository owner",
            "type": "string"
          },
          "page": {
            "description": "Page number for pagination (min 1)",
            "minimum": 1,
            "type": "number"
          },
          "perPage": {
            "description": "Results per page for pagination (min 1, max 100)",
            "maximum": 100,
            "minimum": 1,
            "type": "number"
          },
          "repo": {
            "description": "Repository name",
            "type": "string"
          },
          "since": {
            "description": "Filter by date (ISO 8601 timestamp)",
            "type": "string"
          },
          "sort": {
            "description": "Sort order",
            "enum": ["created", "updated", "comments"],
            "type": "string"
          },
          "state": {
            "description": "Filter by state",
            "enum": ["open", "closed", "all"],
            "type": "string"
          }
        },
        "required": ["owner", "repo"]
      },
      "name": "list_issues"
    },
    {
      "description": "List and filter repository pull requests",
      "inputSchema": {
        "type": "object",
        "properties": {
          "base": {
            "description": "Filter by base branch",
            "type": "string"
          },
          "direction": {
            "description": "Sort direction",
            "enum": ["asc", "desc"],
            "type": "string"
          },
          "head": {
            "description": "Filter by head user/org and branch",
            "type": "string"
          },
          "owner": {
            "description": "Repository owner",
            "type": "string"
          },
          "page": {
            "description": "Page number for pagination (min 1)",
            "minimum": 1,
            "type": "number"
          },
          "perPage": {
            "description": "Results per page for pagination (min 1, max 100)",
            "maximum": 100,
            "minimum": 1,
            "type": "number"
          },
          "repo": {
            "description": "Repository name",
            "type": "string"
          },
          "sort": {
            "description": "Sort by",
            "enum": ["created", "updated", "popularity", "long-running"],
            "type": "string"
          },
          "state": {
            "description": "Filter by state",
            "enum": ["open", "closed", "all"],
            "type": "string"
          }
        },
        "required": ["owner", "repo"]
      },
      "name": "list_pull_requests"
    },
    {
      "description": "List secret scanning alerts in a GitHub repository.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "owner": {
            "description": "The owner of the repository.",
            "type": "string"
          },
          "repo": {
            "description": "The name of the repository.",
            "type": "string"
          },
          "resolution": {
            "description": "Filter by resolution",
            "enum": [
              "false_positive",
              "wont_fix",
              "revoked",
              "pattern_edited",
              "pattern_deleted",
              "used_in_tests"
            ],
            "type": "string"
          },
          "secret_type": {
            "description": "A comma-separated list of secret types to return. All default secret patterns are returned. To return generic patterns, pass the token name(s) in the parameter.",
            "type": "string"
          },
          "state": {
            "description": "Filter by state",
            "enum": ["open", "resolved"],
            "type": "string"
          }
        },
        "required": ["owner", "repo"]
      },
      "name": "list_secret_scanning_alerts"
    },
    {
      "description": "Merge a pull request",
      "inputSchema": {
        "type": "object",
        "properties": {
          "commit_message": {
            "description": "Extra detail for merge commit",
            "type": "string"
          },
          "commit_title": {
            "description": "Title for merge commit",
            "type": "string"
          },
          "merge_method": {
            "description": "Merge method",
            "enum": ["merge", "squash", "rebase"],
            "type": "string"
          },
          "owner": {
            "description": "Repository owner",
            "type": "string"
          },
          "pullNumber": {
            "description": "Pull request number",
            "type": "number"
          },
          "repo": {
            "description": "Repository name",
            "type": "string"
          }
        },
        "required": ["owner", "repo", "pullNumber"]
      },
      "name": "merge_pull_request"
    },
    {
      "description": "Push multiple files to a GitHub repository in a single commit",
      "inputSchema": {
        "type": "object",
        "properties": {
          "branch": {
            "description": "Branch to push to",
            "type": "string"
          },
          "files": {
            "description": "Array of file objects to push, each object with path (string) and content (string)",
            "items": {
              "additionalProperties": false,
              "properties": {
                "content": {
                  "description": "file content",
                  "type": "string"
                },
                "path": {
                  "description": "path to the file",
                  "type": "string"
                }
              },
              "required": ["path", "content"],
              "type": "object"
            },
            "type": "array"
          },
          "message": {
            "description": "Commit message",
            "type": "string"
          },
          "owner": {
            "description": "Repository owner",
            "type": "string"
          },
          "repo": {
            "description": "Repository name",
            "type": "string"
          }
        },
        "required": ["owner", "repo", "branch", "files", "message"]
      },
      "name": "push_files"
    },
    {
      "description": "Search for code across GitHub repositories",
      "inputSchema": {
        "type": "object",
        "properties": {
          "order": {
            "description": "Sort order",
            "enum": ["asc", "desc"],
            "type": "string"
          },
          "page": {
            "description": "Page number for pagination (min 1)",
            "minimum": 1,
            "type": "number"
          },
          "perPage": {
            "description": "Results per page for pagination (min 1, max 100)",
            "maximum": 100,
            "minimum": 1,
            "type": "number"
          },
          "q": {
            "description": "Search query using GitHub code search syntax",
            "type": "string"
          },
          "sort": {
            "description": "Sort field ('indexed' only)",
            "type": "string"
          }
        },
        "required": ["q"]
      },
      "name": "search_code"
    },
    {
      "description": "Search for issues and pull requests across GitHub repositories",
      "inputSchema": {
        "type": "object",
        "properties": {
          "order": {
            "description": "Sort order",
            "enum": ["asc", "desc"],
            "type": "string"
          },
          "page": {
            "description": "Page number for pagination (min 1)",
            "minimum": 1,
            "type": "number"
          },
          "perPage": {
            "description": "Results per page for pagination (min 1, max 100)",
            "maximum": 100,
            "minimum": 1,
            "type": "number"
          },
          "q": {
            "description": "Search query using GitHub issues search syntax",
            "type": "string"
          },
          "sort": {
            "description": "Sort field by number of matches of categories, defaults to best match",
            "enum": [
              "comments",
              "reactions",
              "reactions-+1",
              "reactions--1",
              "reactions-smile",
              "reactions-thinking_face",
              "reactions-heart",
              "reactions-tada",
              "interactions",
              "created",
              "updated"
            ],
            "type": "string"
          }
        },
        "required": ["q"]
      },
      "name": "search_issues"
    },
    {
      "description": "Search for GitHub repositories",
      "inputSchema": {
        "type": "object",
        "properties": {
          "page": {
            "description": "Page number for pagination (min 1)",
            "minimum": 1,
            "type": "number"
          },
          "perPage": {
            "description": "Results per page for pagination (min 1, max 100)",
            "maximum": 100,
            "minimum": 1,
            "type": "number"
          },
          "query": {
            "description": "Search query",
            "type": "string"
          }
        },
        "required": ["query"]
      },
      "name": "search_repositories"
    },
    {
      "description": "Search for GitHub users",
      "inputSchema": {
        "type": "object",
        "properties": {
          "order": {
            "description": "Sort order",
            "enum": ["asc", "desc"],
            "type": "string"
          },
          "page": {
            "description": "Page number for pagination (min 1)",
            "minimum": 1,
            "type": "number"
          },
          "perPage": {
            "description": "Results per page for pagination (min 1, max 100)",
            "maximum": 100,
            "minimum": 1,
            "type": "number"
          },
          "q": {
            "description": "Search query using GitHub users search syntax",
            "type": "string"
          },
          "sort": {
            "description": "Sort field by category",
            "enum": ["followers", "repositories", "joined"],
            "type": "string"
          }
        },
        "required": ["q"]
      },
      "name": "search_users"
    },
    {
      "description": "Update an existing issue in a GitHub repository",
      "inputSchema": {
        "type": "object",
        "properties": {
          "assignees": {
            "description": "New assignees",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "body": {
            "description": "New description",
            "type": "string"
          },
          "issue_number": {
            "description": "Issue number to update",
            "type": "number"
          },
          "labels": {
            "description": "New labels",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "milestone": {
            "description": "New milestone number",
            "type": "number"
          },
          "owner": {
            "description": "Repository owner",
            "type": "string"
          },
          "repo": {
            "description": "Repository name",
            "type": "string"
          },
          "state": {
            "description": "New state",
            "enum": ["open", "closed"],
            "type": "string"
          },
          "title": {
            "description": "New title",
            "type": "string"
          }
        },
        "required": ["owner", "repo", "issue_number"]
      },
      "name": "update_issue"
    },
    {
      "description": "Update an existing pull request in a GitHub repository",
      "inputSchema": {
        "type": "object",
        "properties": {
          "base": {
            "description": "New base branch name",
            "type": "string"
          },
          "body": {
            "description": "New description",
            "type": "string"
          },
          "maintainer_can_modify": {
            "description": "Allow maintainer edits",
            "type": "boolean"
          },
          "owner": {
            "description": "Repository owner",
            "type": "string"
          },
          "pullNumber": {
            "description": "Pull request number to update",
            "type": "number"
          },
          "repo": {
            "description": "Repository name",
            "type": "string"
          },
          "state": {
            "description": "New state",
            "enum": ["open", "closed"],
            "type": "string"
          },
          "title": {
            "description": "New title",
            "type": "string"
          }
        },
        "required": ["owner", "repo", "pullNumber"]
      },
      "name": "update_pull_request"
    },
    {
      "description": "Update a pull request branch with the latest changes from the base branch",
      "inputSchema": {
        "type": "object",
        "properties": {
          "expectedHeadSha": {
            "description": "The expected SHA of the pull request's HEAD ref",
            "type": "string"
          },
          "owner": {
            "description": "Repository owner",
            "type": "string"
          },
          "pullNumber": {
            "description": "Pull request number",
            "type": "number"
          },
          "repo": {
            "description": "Repository name",
            "type": "string"
          }
        },
        "required": ["owner", "repo", "pullNumber"]
      },
      "name": "update_pull_request_branch"
    }
  ]
}
